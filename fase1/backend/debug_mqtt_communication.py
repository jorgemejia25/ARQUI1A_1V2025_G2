#!/usr/bin/env python3
"""
Script de Debug para Comunicaci√≥n MQTT
Verifica que el backend publique correctamente los datos hist√≥ricos
"""

import json
import time
import paho.mqtt.client as mqtt
from config.settings import MQTT_CONFIG

class MQTTDebugger:
    def __init__(self):
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.connected = False
        self.messages_received = []

    def on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            print("‚úÖ Debug conectado al broker MQTT")
            self.connected = True
            
            # Suscribirse a todos los t√≥picos relevantes
            topics = [
                "GRUPO2/history/rasp01",
                "GRUPO2/sensores/rasp01/+",
                "GRUPO2/sensores/rasp01",
                "GRUPO2/commands/rasp01/history",
                "GRUPO2/status/rasp01/+"
            ]
            
            for topic in topics:
                client.subscribe(topic)
                print(f"üì° Suscrito a {topic}")
        else:
            print(f"‚ùå Error conectando: {rc}")

    def on_message(self, topic, message):
        try:
            timestamp = time.strftime('%H:%M:%S')
            data = json.loads(message.toString())
            
            print(f"\nüì• [{timestamp}] Mensaje en {topic}")
            print(f"üìä Datos: {json.dumps(data, indent=2)}")
            
            # An√°lisis espec√≠fico para historial
            if topic == "GRUPO2/history/rasp01":
                if data.get('type') == 'historical_data':
                    points = data.get('data', [])
                    print(f"üîç DATOS HIST√ìRICOS RECIBIDOS:")
                    print(f"   ‚Ä¢ Total puntos: {len(points)}")
                    
                    if points:
                        # Agrupar por sensor
                        sensors = {}
                        for point in points:
                            sensor_type = point.get('sensor_type')
                            if sensor_type not in sensors:
                                sensors[sensor_type] = 0
                            sensors[sensor_type] += 1
                        
                        print(f"   ‚Ä¢ Sensores presentes:")
                        for sensor, count in sensors.items():
                            print(f"     - {sensor}: {count} puntos")
                        
                        # Mostrar primeros 3 puntos como ejemplo
                        print(f"   ‚Ä¢ Ejemplos de datos:")
                        for i, point in enumerate(points[:3]):
                            formatted_time = point.get('formatted_time', 'N/A')
                            sensor_type = point.get('sensor_type', 'N/A')
                            value = point.get('value', 'N/A')
                            print(f"     [{i+1}] {formatted_time}: {sensor_type} = {value}")
                    else:
                        print(f"   ‚ö†Ô∏è No hay puntos de datos")
            
            self.messages_received.append({
                'topic': topic,
                'data': data,
                'timestamp': timestamp
            })
            
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è Mensaje no-JSON en {topic}: {message.toString()}")
        except Exception as e:
            print(f"‚ùå Error procesando mensaje: {e}")

    def send_history_request(self, sensor_type='all', max_points=30):
        """Env√≠a solicitud de historial"""
        if not self.connected:
            print("‚ùå No conectado para enviar solicitud")
            return False

        command = {
            'sensor_type': sensor_type,
            'max_points': max_points,
            'hours_back': 24,
            'timestamp': time.time(),
            'source': 'debug_script',
            'include_stats': True
        }
        
        result = self.client.publish("GRUPO2/commands/rasp01/history", json.dumps(command), qos=1)
        if result.rc == mqtt.MQTT_ERR_SUCCESS:
            print(f"üì§ Solicitud de historial enviada para {sensor_type} ({max_points} puntos)")
            return True
        else:
            print(f"‚ùå Error enviando solicitud: {result.rc}")
            return False

    def run_debug_session(self):
        """Ejecuta sesi√≥n de debug completa"""
        print("üîç INICIANDO DEBUG DE COMUNICACI√ìN MQTT")
        print("=" * 50)
        
        try:
            # Conectar
            print(f"üîó Conectando a {MQTT_CONFIG['BROKER_HOST']}:{MQTT_CONFIG['BROKER_PORT']}")
            self.client.connect(MQTT_CONFIG['BROKER_HOST'], MQTT_CONFIG['BROKER_PORT'], 60)
            self.client.loop_start()
            
            # Esperar conexi√≥n
            time.sleep(2)
            
            if not self.connected:
                print("‚ùå No se pudo conectar al broker MQTT")
                return
            
            print("\nüìä ESTADO INICIAL:")
            print(f"   ‚Ä¢ Mensajes recibidos: {len(self.messages_received)}")
            
            # Test 1: Solicitar historial completo
            print("\nüß™ TEST 1: Historial completo")
            self.send_history_request('all', 20)
            time.sleep(5)
            
            # Test 2: Solicitar historial espec√≠fico
            print("\nüß™ TEST 2: Historial de temperatura")
            self.send_history_request('temperature', 15)
            time.sleep(5)
            
            # Test 3: Verificar que lleguen datos en tiempo real
            print("\nüß™ TEST 3: Monitoreo de datos en tiempo real (30 segundos)")
            start_time = time.time()
            initial_count = len(self.messages_received)
            
            while time.time() - start_time < 30:
                time.sleep(1)
                current_count = len(self.messages_received)
                if current_count > initial_count:
                    new_messages = current_count - initial_count
                    print(f"üìà {new_messages} nuevos mensajes recibidos")
                    initial_count = current_count
            
            # Resumen final
            print(f"\nüìã RESUMEN DE DEBUG:")
            print(f"   ‚Ä¢ Total mensajes recibidos: {len(self.messages_received)}")
            
            # Contar por t√≥pico
            topic_counts = {}
            for msg in self.messages_received:
                topic = msg['topic']
                topic_counts[topic] = topic_counts.get(topic, 0) + 1
            
            print(f"   ‚Ä¢ Mensajes por t√≥pico:")
            for topic, count in topic_counts.items():
                print(f"     - {topic}: {count}")
            
            # Verificar si se recibieron datos hist√≥ricos
            history_messages = [msg for msg in self.messages_received if msg['topic'] == 'GRUPO2/history/rasp01']
            if history_messages:
                print(f"   ‚úÖ Se recibieron {len(history_messages)} respuestas de historial")
                
                for i, msg in enumerate(history_messages):
                    data = msg['data']
                    if data.get('type') == 'historical_data':
                        points = len(data.get('data', []))
                        print(f"     Respuesta {i+1}: {points} puntos hist√≥ricos")
            else:
                print(f"   ‚ùå No se recibieron datos hist√≥ricos")
                print(f"   üí° Posibles problemas:")
                print(f"     - Backend no est√° enviando respuestas")
                print(f"     - T√≥pico incorrecto")
                print(f"     - Formato de datos incorrecto")
            
        except Exception as e:
            print(f"‚ùå Error en debug: {e}")
        finally:
            self.client.loop_stop()
            self.client.disconnect()
            print("\n‚úÖ Debug finalizado")

def main():
    debugger = MQTTDebugger()
    debugger.run_debug_session()

if __name__ == "__main__":
    main() 